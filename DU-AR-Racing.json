{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.print(system.getUtcTime())\n\n----------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------\ncircuitName = \"Penrose Haven Swamp Cup\" -- export: circuit name\nemitterChan = \"swamp\" -- export: emitter communication channel\nchronoStartCode = 1666537200 -- export: race code for synchronized start\ndamageRepportFontHeight = 100 --export: AR damage repport font size\ntourEnd = 2 -- export: laps total number\nscaleCurve = 0.000001 --export: curve scale for waypoints display distance(the smaller the further waypoints will appear)\nconstructMask = true --export: virtual bounding box mask covering up waypoints\nbBoxScale = {1,1,1,1,1,0.2} --export: scale of the bBox for the mask{x front, y front, z front, x back, y back, z back}\nrecordingMode = false -- export: activates waypoints recording mode\nautoRecording = false -- ALT + F9\nautoRecordingdistance = 150\nrecordedWPPos = {}\nwpRadius = 30 --  export: checkpoints are considered as a sphere in meter\nwpHeight = 20 --  export: height of the center of checkpoint above recorded position\n-- ALT + F9 = auto recording by distance\n-- ALT + F8 = remove last waypoint\n-- ALT + F7 = add custom waypoint on player pos\n-- ALT + F6 = repop 1st waypoint marker\nlocal wpPos ={\"::pos{0,0,-1129771.9453,1151973.3083,-2615524.0351}\",\"::pos{0,0,-1129836.4997,1152058.4195,-2615412.1661}\",\"::pos{0,0,-1129903.1247,1152146.4090,-2615301.3546}\",\"::pos{0,0,-1129966.6519,1152231.6865,-2615190.1211}\",\"::pos{0,0,-1130033.6577,1152312.8004,-2615075.6490}\",\"::pos{0,0,-1130097.3588,1152401.1877,-2614966.8524}\",\"::pos{0,0,-1130165.3227,1152518.3691,-2614890.4223}\",\"::pos{0,0,-1130222.1686,1152656.5380,-2614851.0384}\",\"::pos{0,0,-1130277.4655,1152800.1096,-2614858.3295}\",\"::pos{0,0,-1130321.0419,1152944.5774,-2614897.9120}\",\"::pos{0,0,-1130385.0697,1153084.2479,-2614871.9786}\",\"::pos{0,0,-1130453.3813,1153203.4466,-2614801.9855}\",\"::pos{0,0,-1130520.1090,1153328.1076,-2614738.6985}\",\"::pos{0,0,-1130588.5242,1153445.9600,-2614662.9706}\",\"::pos{0,0,-1130657.6285,1153537.4570,-2614557.3182}\",\"::pos{0,0,-1130728.4211,1153650.3510,-2614480.7504}\",\"::pos{0,0,-1130789.7700,1153789.0502,-2614450.1630}\",\"::pos{0,0,-1130859.9764,1153920.3181,-2614401.5095}\",\"::pos{0,0,-1130928.2454,1154041.3174,-2614333.4648}\",\"::pos{0,0,-1130987.3404,1154183.0604,-2614311.7067}\",\"::pos{0,0,-1131046.2263,1154326.3353,-2614312.3786}\",\"::pos{0,0,-1131103.9858,1154471.7739,-2614319.6978}\",\"::pos{0,0,-1131170.9487,1154605.2329,-2614281.2239}\",\"::pos{0,0,-1131243.0772,1154719.2007,-2614200.8641}\",\"::pos{0,0,-1131315.3835,1154809.1364,-2614094.3291}\",\"::pos{0,0,-1131386.3041,1154889.4357,-2613980.5936}\",\"::pos{0,0,-1131456.1475,1154969.1802,-2613866.8499}\",\"::pos{0,0,-1131523.9077,1155025.2095,-2613736.8204}\",\"::pos{0,0,-1131574.4213,1155021.7027,-2613591.6200}\",\"::pos{0,0,-1131614.5740,1154999.4265,-2613443.8690}\",\"::pos{0,0,-1131669.8296,1155010.4969,-2613296.3070}\",\"::pos{0,0,-1131728.9456,1155037.1830,-2613155.5655}\",\"::pos{0,0,-1131780.9344,1155035.3890,-2613008.2377}\",\"::pos{0,0,-1131835.1707,1155038.9883,-2612863.4678}\",\"::pos{0,0,-1131895.9539,1155067.6913,-2612724.9361}\",\"::pos{0,0,-1131950.0274,1155071.1017,-2612579.3805}\",\"::pos{0,0,-1131997.8120,1155068.6514,-2612433.1406}\",\"::pos{0,0,-1132053.2066,1155085.9279,-2612290.3978}\",\"::pos{0,0,-1132112.0284,1155106.8361,-2612145.9486}\",\"::pos{0,0,-1132127.2316,1155016.0069,-2612020.4515}\",\"::pos{0,0,-1132113.4659,1154897.4073,-2611918.4885}\",\"::pos{0,0,-1132104.0127,1154778.0898,-2611818.5591}\",\"::pos{0,0,-1132091.1011,1154657.6444,-2611719.7744}\",\"::pos{0,0,-1132089.7588,1154548.7130,-2611610.5208}\",\"::pos{0,0,-1132114.8766,1154481.8391,-2611469.5244}\",\"::pos{0,0,-1132159.1504,1154457.1087,-2611323.1071}\",\"::pos{0,0,-1132218.7824,1154478.4856,-2611181.4477}\",\"::pos{0,0,-1132271.9158,1154464.0436,-2611035.1659}\",\"::pos{0,0,-1132266.4864,1154349.3247,-2610931.7248}\",\"::pos{0,0,-1132219.2094,1154210.4290,-2610880.9153}\",\"::pos{0,0,-1132178.3188,1154065.0591,-2610842.0242}\",\"::pos{0,0,-1132152.6174,1153926.3785,-2610778.1008}\",\"::pos{0,0,-1132171.4158,1153840.6314,-2610651.4508}\",\"::pos{0,0,-1132219.3329,1153821.9720,-2610503.6480}\",\"::pos{0,0,-1132274.1791,1153819.5739,-2610359.3379}\",\"::pos{0,0,-1132332.8564,1153827.9947,-2610217.3001}\",\"::pos{0,0,-1132393.7705,1153835.1141,-2610073.8130}\",\"::pos{0,0,-1132435.2199,1153800.7903,-2609929.1843}\",\"::pos{0,0,-1132474.0122,1153752.3014,-2609788.6464}\",\"::pos{0,0,-1132479.6242,1153657.8371,-2609667.2927}\",\"::pos{0,0,-1132485.9499,1153557.4570,-2609550.8532}\",\"::pos{0,0,-1132507.0983,1153469.2330,-2609421.9228}\",\"::pos{0,0,-1132527.0173,1153385.3679,-2609292.8755}\",\"::pos{0,0,-1132530.9692,1153279.7725,-2609177.7714}\",\"::pos{0,0,-1132516.0179,1153150.1385,-2609093.6119}\",\"::pos{0,0,-1132486.8039,1153010.8841,-2609034.4914}\",\"::pos{0,0,-1132428.7150,1152868.4214,-2609046.5311}\",\"::pos{0,0,-1132362.7064,1152734.1649,-2609084.7641}\",\"::pos{0,0,-1132288.4096,1152627.5584,-2609166.7168}\",\"::pos{0,0,-1132237.6668,1152483.3121,-2609144.0874}\",\"::pos{0,0,-1132209.6107,1152341.4276,-2609081.9459}\",\"::pos{0,0,-1132178.0094,1152196.7105,-2609031.7940}\",\"::pos{0,0,-1132144.9918,1152054.5040,-2608980.7899}\",\"::pos{0,0,-1132129.9609,1151919.5047,-2608898.7617}\",\"::pos{0,0,-1132131.7408,1151808.4266,-2608791.8373}\",\"::pos{0,0,-1132130.0737,1151698.6894,-2608682.6130}\",\"::pos{0,0,-1132150.8247,1151607.0225,-2608560.7288}\",\"::pos{0,0,-1132116.9004,1151462.1669,-2608520.6364}\",\"::pos{0,0,-1132058.0165,1151319.4701,-2608521.4413}\",\"::pos{0,0,-1132025.7608,1151172.4101,-2608480.7987}\",\"::pos{0,0,-1132002.1405,1151031.4677,-2608423.2210}\",\"::pos{0,0,-1131958.9128,1150882.6407,-2608403.1716}\",\"::pos{0,0,-1131912.9854,1150735.0473,-2608381.7559}\",\"::pos{0,0,-1131863.6523,1150589.3670,-2608377.5074}\",\"::pos{0,0,-1131854.9773,1150461.9132,-2608291.6039}\",\"::pos{0,0,-1131880.0210,1150376.4953,-2608165.1260}\",\"::pos{0,0,-1131904.5466,1150292.6524,-2608038.8348}\",\"::pos{0,0,-1131895.8233,1150168.1606,-2607944.7472}\",\"::pos{0,0,-1131872.1189,1150031.8796,-2607876.6305}\",\"::pos{0,0,-1131843.9498,1149882.8606,-2607837.9244}\",\"::pos{0,0,-1131784.5636,1149741.3633,-2607855.4404}\",\"::pos{0,0,-1131724.4011,1149605.2858,-2607895.7995}\",\"::pos{0,0,-1131664.9366,1149466.6220,-2607928.0763}\",\"::pos{0,0,-1131612.7957,1149320.3569,-2607937.5507}\",\"::pos{0,0,-1131561.5408,1149168.8285,-2607940.0548}\",\"::pos{0,0,-1131514.3135,1149021.8650,-2607940.5785}\",\"::pos{0,0,-1131456.5202,1148878.2777,-2607963.2591}\",\"::pos{0,0,-1131389.6940,1148742.9606,-2608001.8006}\",\"::pos{0,0,-1131331.6264,1148602.6145,-2608042.7128}\",\"::pos{0,0,-1131268.9972,1148460.4891,-2608072.7867}\",\"::pos{0,0,-1131218.0680,1148316.9999,-2608099.3333}\",\"::pos{0,0,-1131161.2084,1148176.2624,-2608126.0748}\",\"::pos{0,0,-1131139.6188,1148033.8493,-2608072.6528}\",\"::pos{0,0,-1131157.4330,1147935.2136,-2607950.4979}\",\"::pos{0,0,-1131201.5850,1147877.0828,-2607807.6453}\",\"::pos{0,0,-1131247.1898,1147826.0549,-2607667.5972}\",\"::pos{0,0,-1131260.6930,1147723.2474,-2607551.8509}\",\"::pos{0,0,-1131248.0240,1147584.3629,-2607487.2524}\",\"::pos{0,0,-1131219.2446,1147437.4710,-2607451.4412}\",\"::pos{0,0,-1131208.6054,1147301.4703,-2607379.8971}\",\"::pos{0,0,-1131187.9683,1147159.0601,-2607326.0067}\",\"::pos{0,0,-1131189.7582,1147033.7878,-2607233.8934}\",\"::pos{0,0,-1131211.2322,1146935.8433,-2607114.9357}\",\"::pos{0,0,-1131254.5253,1146881.0571,-2606976.9943}\",\"::pos{0,0,-1131305.7991,1146847.4426,-2606834.7765}\",\"::pos{0,0,-1131364.6472,1146834.8082,-2606690.7941}\",\"::pos{0,0,-1131430.0862,1146845.3865,-2606548.6068}\",\"::pos{0,0,-1131495.1314,1146878.8866,-2606411.3874}\",\"::pos{0,0,-1131567.8673,1146932.7853,-2606283.8157}\",\"::pos{0,0,-1131640.3829,1147016.8945,-2606175.0517}\",\"::pos{0,0,-1131710.5184,1147130.5775,-2606097.4634}\",\"::pos{0,0,-1131773.5066,1147261.3248,-2606044.4862}\",\"::pos{0,0,-1131829.3458,1147406.1406,-2606019.9150}\",\"::pos{0,0,-1131887.0800,1147549.0698,-2605993.9668}\",\"::pos{0,0,-1131948.1951,1147685.5807,-2605955.2301}\",\"::pos{0,0,-1131981.3464,1147833.7805,-2605981.5139}\",\"::pos{0,0,-1132018.4924,1147983.0304,-2606007.2803}\",\"::pos{0,0,-1132011.7773,1148100.4055,-2606109.2780}\",\"::pos{0,0,-1131978.3827,1148179.5104,-2606238.1813}\",\"::pos{0,0,-1131942.5187,1148253.8779,-2606368.9216}\",\"::pos{0,0,-1131907.9003,1148325.2037,-2606502.8188}\",\"::pos{0,0,-1131916.6371,1148456.4689,-2606582.4818}\",\"::pos{0,0,-1131958.7894,1148604.1944,-2606590.9720}\",\"::pos{0,0,-1132002.6812,1148752.0937,-2606605.4679}\",\"::pos{0,0,-1132051.9044,1148897.6824,-2606603.1307}\",\"::pos{0,0,-1132113.0466,1149035.3200,-2606569.8708}\",\"::pos{0,0,-1132178.9480,1149157.8198,-2606504.9752}\",\"::pos{0,0,-1132253.6622,1149235.5138,-2606394.3258}\",\"::pos{0,0,-1132314.3779,1149376.1509,-2606366.8062}\",\"::pos{0,0,-1132362.6098,1149523.6886,-2606369.3549}\",\"::pos{0,0,-1132428.0093,1149658.4076,-2606329.0481}\",\"::pos{0,0,-1132495.8509,1149785.8557,-2606275.0288}\",\"::pos{0,0,-1132542.0686,1149932.8515,-2606285.3154}\",\"::pos{0,0,-1132616.4741,1150038.8285,-2606201.1797}\",\"::pos{0,0,-1132692.6462,1150121.7493,-2606095.6879}\",\"::pos{0,0,-1132753.5991,1150243.0011,-2606020.9890}\",\"::pos{0,0,-1132818.9271,1150366.8297,-2605951.7922}\",\"::pos{0,0,-1132893.5014,1150489.3004,-2605887.5815}\",\"::pos{0,0,-1132970.7859,1150609.5257,-2605824.8897}\",\"::pos{0,0,-1133056.2222,1150722.4407,-2605760.7300}\",\"::pos{0,0,-1133133.8571,1150779.5422,-2605641.0066}\",\"::pos{0,0,-1133209.0783,1150825.5246,-2605515.0707}\",\"::pos{0,0,-1133273.4335,1150881.6271,-2605386.1559}\",\"::pos{0,0,-1133345.4364,1150970.6007,-2605281.6690}\",\"::pos{0,0,-1133423.1560,1151056.2414,-2605177.0919}\",\"::pos{0,0,-1133506.0392,1151136.5882,-2605072.5721}\",\"::pos{0,0,-1133588.5212,1151234.7779,-2604982.4873}\",\"::pos{0,0,-1133666.9239,1151336.5193,-2604897.6566}\",\"::pos{0,0,-1133748.6968,1151435.0865,-2604811.2123}\",\"::pos{0,0,-1133826.8859,1151519.3088,-2604707.5829}\",\"::pos{0,0,-1133903.2381,1151600.8001,-2604599.5695}\",\"::pos{0,0,-1133986.4957,1151679.2650,-2604492.7365}\",\"::pos{0,0,-1134068.4948,1151738.7124,-2604375.9051}\",\"::pos{0,0,-1134150.2232,1151757.8671,-2604247.0874}\",\"::pos{0,0,-1134189.0600,1151685.1003,-2604115.3810}\",\"::pos{0,0,-1134185.5348,1151561.1940,-2604022.2893}\",\"::pos{0,0,-1134133.0625,1151415.7745,-2604018.7332}\",\"::pos{0,0,-1134068.7459,1151273.9723,-2604039.8940}\",\"::pos{0,0,-1134009.0112,1151131.8771,-2604045.1022}\",\"::pos{0,0,-1133959.9891,1150986.7449,-2604011.6507}\",\"::pos{0,0,-1133951.8363,1150846.1034,-2603949.2790}\",\"::pos{0,0,-1133947.6169,1150713.8180,-2603867.8106}\",\"::pos{0,0,-1133950.1454,1150590.9001,-2603773.5593}\",\"::pos{0,0,-1133952.0071,1150473.5409,-2603673.5895}\",\"::pos{0,0,-1133951.6742,1150344.6873,-2603589.4198}\",\"::pos{0,0,-1133936.6303,1150210.5137,-2603515.9071}\",\"::pos{0,0,-1133884.7128,1150067.1720,-2603487.6281}\",\"::pos{0,0,-1133844.1766,1149919.7422,-2603468.9370}\",\"::pos{0,0,-1133768.4047,1149793.0350,-2603519.7247}\",\"::pos{0,0,-1133709.4883,1149657.4929,-2603575.0841}\",\"::pos{0,0,-1133645.6400,1149522.2747,-2603617.0972}\",\"::pos{0,0,-1133591.1856,1149378.5429,-2603640.9124}\",\"::pos{0,0,-1133534.6310,1149234.5687,-2603649.1218}\",\"::pos{0,0,-1133465.0049,1149107.9930,-2603709.4566}\",\"::pos{0,0,-1133383.5527,1149017.1698,-2603803.2710}\",\"::pos{0,0,-1133309.6216,1148942.6138,-2603916.3464}\",\"::pos{0,0,-1133231.3847,1148869.7191,-2604027.6209}\",\"::pos{0,0,-1133155.7027,1148766.9050,-2604115.3088}\",\"::pos{0,0,-1133092.8662,1148626.5430,-2604149.7747}\",\"::pos{0,0,-1133045.7283,1148478.8259,-2604149.3864}\",\"::pos{0,0,-1133037.0629,1148347.2393,-2604069.1360}\",\"::pos{0,0,-1133028.5062,1148213.8743,-2603988.4357}\",\"::pos{0,0,-1133005.2725,1148069.7578,-2603935.2592}\",\"::pos{0,0,-1132972.4907,1147923.3664,-2603896.9422}\",\"::pos{0,0,-1132956.1809,1147785.1481,-2603829.2083}\",\"::pos{0,0,-1132961.3618,1147665.0187,-2603730.2291}\",\"::pos{0,0,-1132985.8985,1147551.2072,-2603626.4500}\",\"::pos{0,0,-1133004.0332,1147431.0039,-2603528.9441}\",\"::pos{0,0,-1133001.9903,1147294.6913,-2603451.9667}\",\"::pos{0,0,-1132996.5658,1147158.1221,-2603375.9294}\",\"::pos{0,0,-1132973.4158,1147017.7096,-2603311.3103}\",\"::pos{0,0,-1132923.2523,1146870.9938,-2603293.6929}\",\"::pos{0,0,-1132863.0747,1146729.0496,-2603308.6044}\",\"::pos{0,0,-1132812.1465,1146582.0791,-2603326.2503}\",\"::pos{0,0,-1132764.4974,1146435.2026,-2603341.9042}\",\"::pos{0,0,-1132706.2280,1146296.6196,-2603383.3769}\",\"::pos{0,0,-1132639.3631,1146176.3020,-2603452.0311}\",\"::pos{0,0,-1132579.1301,1146046.5777,-2603511.5732}\",\"::pos{0,0,-1132523.3881,1145915.1705,-2603570.3210}\",\"::pos{0,0,-1132465.0533,1145776.9296,-2603622.4606}\",\"::pos{0,0,-1132412.8867,1145630.6107,-2603640.9075}\",\"::pos{0,0,-1132375.0946,1145477.5374,-2603627.7176}\",\"::pos{0,0,-1132351.8257,1145328.6173,-2603586.6692}\",\"::pos{0,0,-1132331.0851,1145181.3516,-2603546.3524}\",\"::pos{0,0,-1132300.7779,1145029.7276,-2603527.0364}\",\"::pos{0,0,-1132258.2718,1144879.2813,-2603525.4222}\",\"::pos{0,0,-1132210.3663,1144732.8509,-2603545.8590}\",\"::pos{0,0,-1132163.2554,1144585.9954,-2603553.6854}\",\"::pos{0,0,-1132150.7553,1144442.1719,-2603498.3714}\",\"::pos{0,0,-1132161.7858,1144313.0908,-2603411.0346}\",\"::pos{0,0,-1132152.9938,1144168.1519,-2603354.3054}\",\"::pos{0,0,-1132111.9596,1144015.9895,-2603357.1560}\",\"::pos{0,0,-1132041.2478,1143905.3659,-2603438.6653}\",\"::pos{0,0,-1131968.7102,1143852.8014,-2603564.8058}\",\"::pos{0,0,-1131901.8212,1143855.7173,-2603705.8465}\",\"::pos{0,0,-1131831.8141,1143843.3289,-2603846.4813}\",\"::pos{0,0,-1131756.4073,1143783.4636,-2603970.4409}\",\"::pos{0,0,-1131678.1734,1143699.3656,-2604072.9251}\",\"::pos{0,0,-1131601.6149,1143650.0874,-2604198.7474}\",\"::pos{0,0,-1131536.8046,1143641.3345,-2604341.5701}\",\"::pos{0,0,-1131470.1183,1143630.2447,-2604480.4192}\",\"::pos{0,0,-1131399.6574,1143584.0065,-2604611.7694}\",\"::pos{0,0,-1131324.7488,1143526.7422,-2604735.7408}\",\"::pos{0,0,-1131257.1765,1143430.1282,-2604834.2850}\",\"::pos{0,0,-1131189.7187,1143313.8692,-2604908.8912}\",\"::pos{0,0,-1131131.4835,1143185.8558,-2604973.0522}\",\"::pos{0,0,-1131067.2389,1143083.1762,-2605069.9605}\",\"::pos{0,0,-1130999.8360,1143045.7424,-2605206.2750}\",\"::pos{0,0,-1130933.4405,1143022.8585,-2605346.0708}\",\"::pos{0,0,-1130869.4197,1143000.7518,-2605486.3020}\",\"::pos{0,0,-1130797.8489,1142969.9867,-2605620.2457}\",\"::pos{0,0,-1130726.0153,1142921.5528,-2605748.9765}\",\"::pos{0,0,-1130655.6845,1142870.3466,-2605880.4362}\",\"::pos{0,0,-1130585.0632,1142819.3156,-2606009.7406}\",\"::pos{0,0,-1130516.3820,1142765.4972,-2606137.5509}\",\"::pos{0,0,-1130440.7160,1142697.3336,-2606256.2173}\",\"::pos{0,0,-1130368.5777,1142624.4218,-2606370.9715}\",\"::pos{0,0,-1130296.6884,1142594.5677,-2606504.4907}\",\"::pos{0,0,-1130236.1033,1142606.5806,-2606647.9649}\",\"::pos{0,0,-1130187.9313,1142633.5759,-2606792.3467}\",\"::pos{0,0,-1130130.2739,1142662.1853,-2606934.5435}\",\"::pos{0,0,-1130068.2427,1142672.7173,-2607074.9774}\",\"::pos{0,0,-1130016.4853,1142663.5488,-2607219.6912}\",\"::pos{0,0,-1129944.0732,1142632.7902,-2607354.6186}\",\"::pos{0,0,-1129879.9809,1142595.5323,-2607490.8289}\",\"::pos{0,0,-1129825.4170,1142553.1457,-2607628.6784}\",\"::pos{0,0,-1129756.4559,1142524.4313,-2607765.4058}\",\"::pos{0,0,-1129695.9046,1142515.6884,-2607906.7393}\",\"::pos{0,0,-1129671.1344,1142604.1187,-2608030.5848}\",\"::pos{0,0,-1129676.1968,1142743.4344,-2608098.4602}\",\"::pos{0,0,-1129702.7607,1142896.2828,-2608118.3981}\",\"::pos{0,0,-1129753.0692,1143035.1763,-2608073.6841}\",\"::pos{0,0,-1129808.4971,1143176.1715,-2608030.6188}\",\"::pos{0,0,-1129872.9480,1143285.6241,-2607943.4409}\",\"::pos{0,0,-1129933.2832,1143408.7664,-2607866.6530}\",\"::pos{0,0,-1129963.4949,1143560.9476,-2607873.2689}\",\"::pos{0,0,-1129973.7264,1143698.8524,-2607941.8437}\",\"::pos{0,0,-1129983.3659,1143839.6021,-2608007.9321}\",\"::pos{0,0,-1130014.5529,1143989.5731,-2608022.9337}\",\"::pos{0,0,-1130056.2331,1144139.1153,-2608015.6609}\",\"::pos{0,0,-1130090.3249,1144289.4699,-2608026.2047}\",\"::pos{0,0,-1130125.0522,1144439.2006,-2608039.8516}\",\"::pos{0,0,-1130144.2049,1144588.6000,-2608078.8315}\",\"::pos{0,0,-1130149.9018,1144727.3786,-2608150.3597}\",\"::pos{0,0,-1130152.4522,1144861.1229,-2608229.0110}\",\"::pos{0,0,-1130157.4621,1144992.9285,-2608313.0708}\",\"::pos{0,0,-1130151.1852,1145120.1415,-2608402.8197}\",\"::pos{0,0,-1130159.0988,1145256.5119,-2608474.1964}\",\"::pos{0,0,-1130170.3508,1145395.8840,-2608545.0159}\",\"::pos{0,0,-1130175.7539,1145526.8201,-2608626.6708}\",\"::pos{0,0,-1130172.0563,1145660.9003,-2608707.3388}\",\"::pos{0,0,-1130164.5872,1145772.7036,-2608813.9160}\",\"::pos{0,0,-1130137.0705,1145848.7761,-2608945.0976}\",\"::pos{0,0,-1130095.2571,1145899.2936,-2609087.0502}\",\"::pos{0,0,-1130050.8104,1145947.5049,-2609229.0514}\",\"::pos{0,0,-1130015.6265,1146005.3065,-2609368.8051}\",\"::pos{0,0,-1130007.4022,1146117.7052,-2609473.8774}\",\"::pos{0,0,-1130022.7831,1146259.5540,-2609531.7199}\",\"::pos{0,0,-1130059.8648,1146410.4133,-2609550.8394}\",\"::pos{0,0,-1130099.4438,1146562.2727,-2609561.7090}\",\"::pos{0,0,-1130140.2499,1146710.5333,-2609565.7183}\",\"::pos{0,0,-1130168.0224,1146857.3253,-2609602.8399}\",\"::pos{0,0,-1130172.5109,1146988.7387,-2609682.9726}\",\"::pos{0,0,-1130140.3868,1147049.3273,-2609823.3873}\",\"::pos{0,0,-1130094.3963,1147086.8687,-2609965.7187}\",\"::pos{0,0,-1130049.0369,1147129.7842,-2610107.0310}\",\"::pos{0,0,-1130032.2511,1147221.3054,-2610231.8069}\",\"::pos{0,0,-1129997.1059,1147288.8667,-2610365.5103}\",\"::pos{0,0,-1129937.4180,1147256.8286,-2610506.6691}\",\"::pos{0,0,-1129873.9407,1147187.9603,-2610628.5576}\",\"::pos{0,0,-1129804.5813,1147110.2220,-2610742.9570}\",\"::pos{0,0,-1129742.0469,1146985.4627,-2610807.5857}\",\"::pos{0,0,-1129685.4400,1146851.8826,-2610862.2214}\",\"::pos{0,0,-1129622.7328,1146725.0889,-2610932.4409}\",\"::pos{0,0,-1129561.3863,1146679.9839,-2611068.0026}\",\"::pos{0,0,-1129504.1878,1146656.0306,-2611210.4762}\",\"::pos{0,0,-1129439.4410,1146602.8024,-2611340.1951}\",\"::pos{0,0,-1129369.8208,1146505.4495,-2611443.4605}\",\"::pos{0,0,-1129311.1383,1146376.8142,-2611505.4076}\",\"::pos{0,0,-1129252.3276,1146250.9267,-2611573.1207}\",\"::pos{0,0,-1129190.0615,1146135.9087,-2611661.9494}\",\"::pos{0,0,-1129128.8212,1146020.1136,-2611746.2378}\",\"::pos{0,0,-1129064.0215,1145901.9295,-2611827.8373}\",\"::pos{0,0,-1129001.4233,1145776.2239,-2611901.5993}\",\"::pos{0,0,-1128945.0168,1145650.0991,-2611969.2401}\",\"::pos{0,0,-1128885.9846,1145521.0170,-2612036.2302}\",\"::pos{0,0,-1128827.2096,1145390.7123,-2612106.3746}\",\"::pos{0,0,-1128764.8682,1145279.5461,-2612192.6030}\",\"::pos{0,0,-1128702.6844,1145179.3850,-2612293.4172}\",\"::pos{0,0,-1128633.8750,1145089.0366,-2612399.7171}\",\"::pos{0,0,-1128579.8674,1144986.2252,-2612501.0020}\",\"::pos{0,0,-1128518.9227,1144881.5230,-2612600.8633}\",\"::pos{0,0,-1128457.8640,1144782.8524,-2612702.4579}\",\"::pos{0,0,-1128397.8998,1144702.4085,-2612819.7209}\",\"::pos{0,0,-1128339.8274,1144667.7217,-2612961.7009}\",\"::pos{0,0,-1128293.5732,1144669.8621,-2613108.9661}\",\"::pos{0,0,-1128252.8579,1144702.7137,-2613254.5564}\",\"::pos{0,0,-1128220.7162,1144755.5120,-2613397.8825}\",\"::pos{0,0,-1128181.9070,1144800.3651,-2613540.2848}\",\"::pos{0,0,-1128146.8484,1144842.0696,-2613685.1004}\",\"::pos{0,0,-1128105.8566,1144868.5415,-2613834.8074}\",\"::pos{0,0,-1128068.5006,1144905.0658,-2613983.4603}\",\"::pos{0,0,-1128041.5685,1144974.6644,-2614119.5244}\",\"::pos{0,0,-1128010.3832,1145032.8736,-2614260.4180}\",\"::pos{0,0,-1127980.8863,1145089.8249,-2614400.7064}\",\"::pos{0,0,-1127951.5464,1145147.7915,-2614544.6526}\",\"::pos{0,0,-1127921.9417,1145205.6024,-2614688.1725}\",\"::pos{0,0,-1127893.8623,1145261.7421,-2614828.5816}\",\"::pos{0,0,-1127865.6179,1145319.0275,-2614972.5809}\",\"::pos{0,0,-1127836.4764,1145375.9393,-2615114.6613}\",\"::pos{0,0,-1127801.2759,1145434.3138,-2615254.6862}\",\"::pos{0,0,-1127773.5168,1145490.9122,-2615397.8473}\",\"::pos{0,0,-1127750.1671,1145546.2138,-2615541.3373}\",\"::pos{0,0,-1127721.3015,1145603.3496,-2615683.5963}\",\"::pos{0,0,-1127696.4527,1145659.8545,-2615826.6134}\",\"::pos{0,0,-1127666.4171,1145717.7916,-2615966.2965}\",\"::pos{0,0,-1127646.0194,1145774.9470,-2616110.5136}\",\"::pos{0,0,-1127619.1488,1145833.5186,-2616252.1459}\",\"::pos{0,0,-1127595.8827,1145901.0752,-2616390.8957}\",\"::pos{0,0,-1127579.5201,1145988.1397,-2616518.3093}\",\"::pos{0,0,-1127567.1307,1146089.7324,-2616634.1172}\",\"::pos{0,0,-1127578.0288,1146218.9258,-2616718.7255}\",\"::pos{0,0,-1127597.8495,1146357.9498,-2616784.8585}\",\"::pos{0,0,-1127626.2854,1146502.2530,-2616830.9591}\",\"::pos{0,0,-1127651.1131,1146643.3630,-2616892.0056}\",\"::pos{0,0,-1127675.2864,1146778.2172,-2616961.6898}\",\"::pos{0,0,-1127691.2972,1146909.4184,-2617041.5647}\",\"::pos{0,0,-1127694.0660,1147024.5335,-2617145.2333}\",\"::pos{0,0,-1127676.8590,1147103.5138,-2617279.0173}\",\"::pos{0,0,-1127659.8079,1147170.4955,-2617416.2009}\",\"::pos{0,0,-1127672.9144,1147306.4278,-2617490.9883}\",\"::pos{0,0,-1127720.4843,1147452.9466,-2617484.0832}\",\"::pos{0,0,-1127759.9509,1147600.7250,-2617502.7048}\",\"::pos{0,0,-1127790.3502,1147747.9855,-2617541.1484}\",\"::pos{0,0,-1127805.6980,1147880.7852,-2617624.4975}\",\"::pos{0,0,-1127840.6291,1148025.2526,-2617663.3405}\",\"::pos{0,0,-1127894.2956,1148139.0488,-2617573.4648}\",\"::pos{0,0,-1127948.2828,1148239.9445,-2617470.4241}\",\"::pos{0,0,-1128005.7302,1148343.1028,-2617370.9248}\",\"::pos{0,0,-1128056.7207,1148482.6839,-2617324.0909}\",\"::pos{0,0,-1128101.9737,1148624.7835,-2617285.8712}\",\"::pos{0,0,-1128151.5140,1148763.6326,-2617241.6049}\",\"::pos{0,0,-1128209.2479,1148898.9895,-2617192.7364}\",\"::pos{0,0,-1128267.5445,1149032.8637,-2617140.9861}\",\"::pos{0,0,-1128325.2520,1149166.6407,-2617088.7164}\",\"::pos{0,0,-1128387.2885,1149297.0124,-2617030.8038}\",\"::pos{0,0,-1128458.0047,1149421.2671,-2616973.5425}\",\"::pos{0,0,-1128523.0283,1149549.8094,-2616914.7021}\",\"::pos{0,0,-1128584.3530,1149683.6059,-2616866.8126}\",\"::pos{0,0,-1128642.7703,1149820.2170,-2616826.8268}\",\"::pos{0,0,-1128700.7374,1149958.1970,-2616784.9873}\",\"::pos{0,0,-1128740.8965,1150104.9336,-2616813.1842}\",\"::pos{0,0,-1128770.5605,1150244.1656,-2616871.2237}\",\"::pos{0,0,-1128810.6278,1150390.6505,-2616894.8690}\",\"::pos{0,0,-1128860.6900,1150536.4201,-2616895.6059}\",\"::pos{0,0,-1128915.9254,1150676.7378,-2616865.6947}\",\"::pos{0,0,-1128977.7292,1150787.4155,-2616778.0448}\",\"::pos{0,0,-1129039.6337,1150896.5223,-2616686.4176}\",\"::pos{0,0,-1129100.9244,1150960.0656,-2616558.7591}\",\"::pos{0,0,-1129145.9852,1150965.5334,-2616411.0636}\",\"::pos{0,0,-1129195.5379,1150978.4002,-2616265.7214}\",\"::pos{0,0,-1129251.5962,1151022.1993,-2616129.3598}\",\"::pos{0,0,-1129315.3110,1151113.0203,-2616021.3330}\",\"::pos{0,0,-1129380.3146,1151223.0878,-2615934.0679}\",\"::pos{0,0,-1129443.9724,1151341.8810,-2615858.1394}\",\"::pos{0,0,-1129504.3978,1151466.9779,-2615791.1942}\",\"::pos{0,0,-1129568.7628,1151596.4875,-2615733.5193}\",\"::pos{0,0,-1129632.0634,1151727.5664,-2615682.6287}\",\"::pos{0,0,-1129698.5249,1151842.8941,-2615601.7569}\",}\n\n\nsystem.setWaypoint(wpPos[1],true)\nsounds = {start = {\"Race_start.mp3\",2.8},\n          checkpoint = {\"Race_checkpoint.mp3\",0.8},\n          finish = {\"Race_finish.mp3\",7}}\n\n----------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------\n\nsystem.print(\"Sync Board started\")\ncore = nil\nscreen = nil\nemitter = nil\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n         if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getElementClass())\n            if slot.getClass() == \"CoreUnitDynamic\" then\n                core = slot\n                system.print(\"Core found\")\n            end\n            if slot.getClass() == \"ScreenUnit\" then\n                screen = slot\n                system.print(\"Screen found\")\n            end\n            if slot.getClass() == \"EmitterUnit\" then\n                emitter = slot\n                system.print(\"Emitter found\")\n            end\n        end\n    end\nend\nfindConnectedSlots()\nif core == nil then system.print(\"Core needs to be connected!\") unit.exit()end\n\nAtlas = require \"atlas\"\nHelios = {}\nfor k, v in pairs(Atlas[0]) do\n    Helios[k]={name = Atlas[0][k].name[1],\n                        center = Atlas[0][k].center,\n                        radius = Atlas[0][k].radius,\n                        id = Atlas[0][k].id,\n                        }\nend\nAtlas = nil\n\nfunction playSound(mp3)\n    system.playSound(sounds[mp3][1])\nend\n\n\nlocal cos, sin, max, min, sqrt, rad, match, toNum = math.cos, math.sin, math.max, math.min, math.sqrt, math.rad, string.match, tonumber\nlocal function convertToWorldCoordinates(posString)\n    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' .. num .. ',' .. num ..  ',' .. num .. '}'\n    local systemId, bodyId, latitude, longitude, altitude = match(posString,posPattern)\n    systemId = toNum(systemId)\n    bodyId = toNum(bodyId)\n    latitude = toNum(latitude)\n    longitude = toNum(longitude)\n    altitude = toNum(altitude)+wpHeight\n    if toNum(bodyId) == 0 then\n        return latitude,longitude,altitude\n    end\n    latitude = 0.0174532925199 * max(min(latitude, 90), -90)\n    longitude = 0.0174532925199 * (longitude % 360)\n    local center, radius = Helios[bodyId].center, toNum(Helios[bodyId].radius)\n    local xproj = cos(latitude)\n    local px, py, pz = center[1]+(radius+altitude) * xproj*cos(longitude),\n    center[2]+(radius+altitude) * xproj*sin(longitude),\n    center[3]+(radius+altitude) * sin(latitude)\n    return px, py, pz\nend\n\nlocal convertWP = function(t) -- convert a table of pos\n    local newT = {}\n    local x,y,z = 0,0,0\n    for i, v in ipairs(t) do\n        x,y,z = convertToWorldCoordinates(v)\n        newT[i] = {x,y,z} \n    end\n    return newT\nend\n\n\nelements = core.getElementIdList()\nallElements = {}\ndammagedElements = {}\nlocal ei = 0\nfor k, v in pairs(elements) do\n    local class = core.getElementDisplayNameById(v)\n    local data = system.getItem(core.getElementItemIdById(v))\n    ei = ei+1\n    allElements[ei] = {id = v, name = class,text = \"0\", health = core.getElementHitPointsById(v), maxHealth = core.getElementMaxHitPointsById(v), localPos = core.getElementPositionById(v), pos = {0,0,0}}\nend\n\nlocal bBoxSize = construct.getBoundingBoxSize()\nlocal bBx, bBy, bBz =  bBoxSize[1], bBoxSize[2], bBoxSize[3]\nlocal bBoxCenter = construct.getBoundingBoxCenter()\nlocal bBCx, bBCy, bBCz = bBoxCenter[1], bBoxCenter[2], bBoxCenter[3]\n\nlocalBb = {{bBCx-(bBx/2)*bBoxScale[1],bBCy+(bBy/2)*bBoxScale[2],bBCz+(bBz/2)*bBoxScale[3]},\n            {bBCx-(bBx/2)*bBoxScale[4],bBCy-(bBy/2)*bBoxScale[5],bBCz-(bBz/2)*bBoxScale[6]},\n            {bBCx+(bBx/2)*bBoxScale[4],bBCy-(bBy/2)*bBoxScale[5],bBCz-(bBz/2)*bBoxScale[6]},\n            {bBCx+(bBx/2)*bBoxScale[1],bBCy+(bBy/2)*bBoxScale[2],bBCz+(bBz/2)*bBoxScale[3]},\n            {bBCx-(bBx/2)*bBoxScale[1],bBCy+(bBy/2)*bBoxScale[2],bBCz+(bBz/2)*bBoxScale[3]}\n            }\nworldBb = {}\nWP = {}\n\nscript = {\n    onStart = function()\n        if #recordedWPPos ~= 0 or recordingMode == true then\n            WP = convertWP(recordedWPPos)\n            system.print(\"Custom reccorded waypoints loaded: \"..#recordedWPPos)\n        else\n            WP = convertWP(wpPos) -- convert wpPos strings into world coordinates\n            system.print(\"Hardcoded waypoints loaded \"..#wpPos)\n        end\n        system.showScreen(1)\n        fps = 0\n        uCount = 0\n        fillAnim = 1\n        unit.setTimer(\"fps\",1)\n        initialised = false\n        running = false\n        playerRecap = {}\n        playerRecap.chronoTours = {}\n        playerRecap.waypoint = 0\n        playerRecap.bestTour = 0\n        remainingWP = WP\n        local startDelay = chronoStartCode < system.getUtcTime() and system.getUtcTime() + chronoStartCode or chronoStartCode - system.getUtcTime()\n        --chronoStartCode = chronoStartCode - system.getUtcTime()\n        --system.print(chronoStartCode)\n        unit.setTimer(\"startdelay\",startDelay)\n        system.setScreen(\"\")\n        system.setWaypoint(wpPos[1],true)\n        system.print(\"Script initialised succesfully!\")\n        emitter.send(emitterChan,serialize({construct = {id = construct.getId(), name = construct.getName()}, player = {id = player.getId(), name = player.getName()}, totalTime = 0, lap = 1}))\n    end,\n\n    onStop = function()\n        system.print(\"Thank you for playing on Haven Swamp Circuit, see you soon!\")\n    end,\n\n    luaInput = function(text)\n        if text == \"reset race\" then\n            chronoStartCode = system.getUtcTime() + 10\n            script.onStart()\n        elseif text == \"force start\" then\n            chronoStartCode = system.getUtcTime() + 10\n            script.onStart()\n        elseif text == \"reset recording\" then\n            recordedWPPos = {}\n        elseif text == \"print to screen\" then\n            local data = \"{\"\n            for i, v in ipairs(recordedWPPos) do\n                data = data ..'\"'.. v ..'\",'\n            end\n            data = data .. \"}\"\n            if screen ~= nil then \n                screen.setHTML(data)\n            end\n        end\n    end,\n}\nscript.onStart()\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"fps = uCount\nuCount = 0","filter":{"args":[{"value":"fps"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"initialised = true\nplayerRecap.chronoTours[1] = {system.getUtcTime(),0}\nplaySound(\"start\")\nunit.stopTimer(\"startdelay\")","filter":{"args":[{"value":"startdelay"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"script.onStop()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"local sgt = system.getUtcTime()\nlocal sqrt, tan, rad, format, concat, floor = math.sqrt, math.tan, math.rad, string.format, table.concat, math.floor\nlocal sw = system.getScreenWidth()\nlocal sh = system.getScreenHeight()\nlocal vFov = system.getCameraVerticalFov()\nlocal near = 0.1\nlocal far = 100000000.0\nlocal aspectRatio = sh/sw\nlocal tanFov = 1.0/tan(rad(vFov)*0.5)\nlocal field = -far/(far-near)\nlocal af = aspectRatio*tanFov\nlocal nq = near*field\n\nlocal camWP = system.getCameraWorldPos()\nlocal camWPx, camWPy, camWPz = camWP[1], camWP[2], camWP[3]\nlocal camWF = system.getCameraWorldForward()\nlocal camWFx, camWFy, camWFz = camWF[1], camWF[2], camWF[3]\nlocal camWR = system.getCameraWorldRight()\nlocal camWRx, camWRy, camWRz = camWR[1], camWR[2], camWR[3]\nlocal camWU = system.getCameraWorldUp()\nlocal camWUx, camWUy, camWUz = camWU[1], camWU[2], camWU[3]\n\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal mPP = player.getPosition()\nlocal mPPx, mPPy = mPP[1], mPP[2]\nlocal cAV = construct.getWorldVelocity()\nlocal cAVx, cAVy, cAVz = cAV[1], cAV[2], cAV[3]\nlocal xyzSpeedMPS = sqrt(cAVx^2+cAVy^2+cAVz^2)\n\nlocal posX, posY, posZ = 0, 0, 0\nlocal vx, vy, vz = 0, 0, 0\nlocal sx, sy, sz = 0, 0, 0\nlocal sPX, sPY = 0\nlocal dist = 0\n\nlocal function projection2D()\n    vx = posX * camWRx + posY * camWRy + posZ * camWRz\n    vy = posX * camWFx + posY * camWFy + posZ * camWFz\n    vz = posX * camWUx + posY * camWUy + posZ * camWUz\n    sx = (af * vx)/vy\n    sy = ( -tanFov * vz)/vy\n    sz = ( -field * vy + nq)/vy\n    sPX, sPY = (sx+1)*sw*0.5, (sy+1)*sh*0.5 -- screen pos X Y\n    dist = sqrt(posX*posX + posY*posY + posZ*posZ) -- distance from camera to pos\nend\n\nlocal styles = [[\n<style>\n.markers {text-anchor: middle; font-family: Play; alignment-baseline: middle; fill: white;}\n.counter {text-anchor: middle; font-family: Play; alignment-baseline: middle; fill: red;}\n.hud {text-anchor: start; font-family: Play; alignment-baseline: middle; stroke-width: 2; fill: red;}\n.repport {text-anchor: middle; font-family: Play; alignment-baseline: middle; fill: orange;}\n.repportRed {text-anchor: middle; font-family: Play; alignment-baseline: middle; fill: red;}\n</style>]]\n\nlocal mask = \"\"\nif system.isFirstPerson() ~= 1 and constructMask == true then\n    mask = mask..[[<clipPath id=\"bBox\"><polyline points=\"0,0 ]]..sw..[[,0 ]]..sw..[[,]]..sh..[[ 0,]]..sh..[[ 0,0 ]]\n    for i, v in ipairs(worldBb) do\n        posX = v[1] - camWPx\n        posY = v[2] - camWPy\n        posZ = v[3] - camWPz\n        projection2D()\n        mask = mask .. format(\"%0.1f,%0.1f \",sPX,sPY)\n    end\n    mask = mask .. [[\"/></clipPath>]]\nend\n    \nlocal style = \"\"\nlocal svgT = {}\nlocal ind = 0\nlocal text = \"\"\n\nfor i, v in ipairs(dammagedElements) do\n    style = \"repport\"\n    posX = v.pos[1] - camWPx\n    posY = v.pos[2] - camWPy\n    posZ = v.pos[3] - camWPz\n    projection2D()\n    if sz < 1 and sPX > 0 and sPX < sw and sPY > 0  and sPY < sh then\n        text = v.text\n        if tonumber(v.text) == 0 then style = \"repportRed\" text = v.name end\n        ind = ind +1\n        svgT[ind] = format([[<text x=\"%.1f\" y=\"%.1f\" class=\"%s\" font-size=\"%.1f\">%s%%</text>]], \n            sPX,sPY,style,1 / dist * damageRepportFontHeight,text\n        )\n    end\nend\nlocal ctn = #playerRecap.chronoTours or 0\nlocal wpn = #remainingWP ~= 0 and #remainingWP or #WP\nif running == true and recordingMode == false then\n    fillAnim = fillAnim > 0.3 and fillAnim - 0.02 or 0.9\n    local sizeScale = 1\n    for i=wpn, 1, -1 do\n        local v = remainingWP[i]\n        posX = v[1] - camWPx\n        posY = v[2] - camWPy\n        posZ = v[3] - camWPz\n        projection2D()\n        sizeScale = -scaleCurve*v.dist^2 + 1\n        sizeScale = sizeScale > 0 and sizeScale or 0\n        if sz < 1 and sPX > -sw and sPX < 2*sw and sPY > -sh  and sPY < 2*sh and sizeScale > 0 then\n            local h = 1 / dist * wpRadius * 1000\n            local fcolor = ctn == tourEnd and playerRecap.waypoint == wpn and i == 1 and \"orange\" or i == 1 and \"chartreuse\" or \"skyblue\"\n            --if  then fcolor = \"gold\" end\n            ind = ind +1\n            svgT[ind] = format([[<style>\n                .waypoint%s {text-anchor: middle; stroke: %s; stroke-width: %.1f}\n                </style>]],\n                i, \"GreenYellow\", 1 / dist * 400)\n            ..format([[<radialGradient id=\"radial\" cx=\"%.1f\" cy=\"%.1f\" r=\"%.1f\"\n                gradientUnits=\"userSpaceOnUse\">\n                <stop  offset=\"%.2f\" style=\"stop-color:%s; stop-opacity:0.2\"/>\n                <stop  offset=\"1\" style=\"stop-color:%s\"; stop-opacity:0.01/>\n                </radialGradient>]],\n                sPX, sPY,  h*sizeScale, fillAnim, \"black\", fcolor)\n            ..format([[<circle cx=\"%.1f\" cy=\"%.1f\" r=\"%.1f\" class=\"%s\" fill=\"url(#radial)\" clip-path=\"url(#bBox)\"/>]], \n                sPX, sPY,  h*sizeScale, \"waypoint\"..i)\n            if fcolor == \"orange\" then break end\n        end\n    end\nelseif recordingMode == true then\n    wpn = #WP\n    for i=wpn, 1, -1 do\n        local v = WP[i]\n        posX = v[1] - camWPx\n        posY = v[2] - camWPy\n        posZ = v[3] - camWPz\n        projection2D()\n        if sz < 1 and sPX > -sw and sPX < 2*sw and sPY > -sh  and sPY < 2*sh then\n            local h = 1 / dist * 2000\n            ind = ind + 1\n            svgT[ind] = format([[<text x=\"%.1f\" y=\"%.1f\" class=\"markers\" font-size=\"%.1f\" clip-path=\"url(#bBox)\">%s</text>]],\n                sPX, sPY, h, i)\n        end\n        if i == wpn - 50 then break end\n    end\nend\n\n\n--SVG = SVG .. [[<text x=\"20\" y=\"20\" class=\"hud\" font-size=\"20\" >AR Ship Info - by Jeronimo 2022</text>]] \n--SVG = SVG .. [[<text x=\"20\" y=\"40\" class=\"hud\" font-size=\"20\" >FPS: ]].. fps ..[[</text>]] \n--SVG = SVG .. [[<text x=\"20\" y=\"60\" class=\"hud\" font-size=\"20\" >AR points displayed: ]].. ind ..[[</text>]]\n\nlocal function SecondsToClock(seconds)\n    local seconds = tonumber(seconds)\n    local miliSec = seconds - floor(seconds) \n    if seconds <= 0 then --or floor(seconds/3600) > 24 \n        return \"00min : 00sec\"\n    else\n        local hours = format(\"%02.f\", floor(seconds/3600))\n        local mins = format(\"%02.f\", floor(seconds/60 - (hours*60)))\n        local secs = format(\"%02.f\", floor(seconds - hours*3600 - mins *60))\n        return format(\"%.0fmin : %.0fsec : %0.fms\", hours*60+mins, secs, miliSec*1000)\n    end\nend  \n\nlocal tSVG = {}\nlocal tind = 0\nlocal tLines = 5\nlocal gAT = running == true and system.getUtcTime() or ctn ~= 0 and playerRecap.chronoTours[ctn][2] or system.getUtcTime()\n\ntind = tind +1\ntSVG[tind] = [[<table height=]].. 15/ctn+tLines ..[[% border=\"1\" cellpadding=\"5\">\n<tr>\n<td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n<p style=\"font-size: 1.25em; color:skyblue; font-family:Play; \">\n]].. circuitName ..[[\n</p>\n</td>\n</tr>]]\n\ntind = tind +1\ntSVG[tind] = [[\n<tr>\n<td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n<p style=\"font-size: 1em; color:white; font-family:Play; \">\nWaypoint: ]].. playerRecap.waypoint..\"/\".. wpn ..[[\n</p>\n</td>\n</tr>]]\n\ntind = tind +1\ntSVG[tind] = [[\n<tr>\n<td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n<p style=\"font-size: 1em; color:white; font-family:Play; \">\nLap: ]].. ctn ..\"/\".. tourEnd ..[[\n</p>\n</td>\n</tr>]]\n\nfor i, v in ipairs(playerRecap.chronoTours) do\n    local timeText = i < ctn and SecondsToClock(v[2]-v[1]) or SecondsToClock(gAT-v[1]) \n    tind = tind +1\n    tSVG[tind] = [[<tr>\n    <td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n    <p style=\"font-size: 1.1em; color:red; font-family:Play;\">\n    Lap time ]].. i ..[[: ]].. timeText ..[[\n    </p>\n    </td>\n    </tr>]]     \nend\n\ntind = tind +1\ntSVG[tind] = [[\n<tr>\n<td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n<p style=\"font-size: 1em; color:white; font-family:Play; \">\nBest Time: ]].. SecondsToClock(playerRecap.bestTour) ..[[\n</p>\n</td>\n</tr>]]\n\nif ctn ~= 0 then\n    tind = tind +1\n    tSVG[tind] = [[\n    <tr>\n    <td height=]].. 100/ctn+tLines ..[[% width=100% align=\"left\" valign=\"center\">\n    <p style=\"font-size: 1em; color:white; font-family:Play; \">\n    Total Time: ]].. SecondsToClock(gAT-playerRecap.chronoTours[1][1]) ..[[\n    </p>\n    </td>\n    </tr>]]\nend\n\ntind = tind +1\ntSVG[tind] = \"</table>\"\n\ngAT = system.getUtcTime()\nif chronoStartCode - gAT > 0 then\n    ind = ind +1\n    svgT[ind] = format([[<text x=\"%.1f\" y=\"%.1f\" class=\"counter\" font-size=\"3em\">%s starts in: %s</text>]],\n                 sw/2, sh/2, circuitName, SecondsToClock(chronoStartCode - gAT))\n    --system.print(chronoStartCode - gAT)\nend\n\ntSVG = concat(tSVG)\nlocal SVG = concat(svgT)\n\nposX = cWOFx*1000000000000 - camWPx\nposY = cWOFy*1000000000000 - camWPy\nposZ = cWOFz*1000000000000 - camWPz\nprojection2D()\nSVG = SVG..format([[<text x=\"%.1f\" y=\"%.1f\" font-size=\"20\" text-anchor=\"middle\" font-family=\"play\" alignment-baseline=\"middle\" fill=\"white\">╬</text>]],\n        sPX, sPY)\nif xyzSpeedMPS > 5 then\n    posX = (cAVx)*1000000000000 - camWPx\n    posY = (cAVy)*1000000000000 - camWPy\n    posZ = (cAVz)*1000000000000 - camWPz\n    projection2D()\nend\nSVG = SVG..format([[<text x=\"%.1f\" y=\"%.1f\" font-size=\"20\" text-anchor=\"middle\" font-family=\"play\" alignment-baseline=\"middle\" fill=\"chartreuse\">┼</text>]],\n    sPX, sPY)\n\n\nhtml = [[\n<style>\nsvg {\nposition:absolute;\ntop:0px;\nleft:0px\n}\n</style>\n</style>\n<div style=\"left:20px; top:30%; position:absolute; width:100%; height:100%\">  \n]].. tSVG ..[[\n</div>\n<div>\n<svg viewBox=\"0 0 ]].. sw ..[[ ]].. sh ..[[\">\n]].. styles .. [[\n]].. mask .. [[\n]].. SVG ..[[\n</svg>\n</div>\n]]\n\nsystem.setScreen(html)\nuCount = uCount + 1\n","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"4"},{"code":"local format,cos, sin, max, min, sqrt, rad, match, toNum = string.format, math.cos, math.sin, math.max, math.min, math.sqrt, math.rad, string.match, tonumber\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\n\nlocal function vectorLen(x,y,z)\n    return sqrt(x * x + y * y + z * z)\nend\n\nif initialised == true and recordingMode == false then\n    local function tableShift(tbl, amount)\n        local t = {}\n        local n = #tbl\n        local i\n        for k,v in ipairs(tbl) do\n            i = k + amount > 0 and k + amount or n\n            if i <= n then\n                t[i] = v\n            else\n                t[i-n] = v\n            end\n        end\n        return t\n    end\n    \n    local x,y,z = 0,0,0\n    local function local2World(vx,vy,vz)\n        x = vx * cWORx + vy * cWOFx + vz * cWOUx + cWPx\n        y = vx * cWORy + vy * cWOFy + vz * cWOUy + cWPy\n        z = vx * cWORz + vy * cWOFz + vz * cWOUz + cWPz\n        return x,y,z\n    end\n\n    local vx,vy,vz = 0,0,0\n    local health = 100\n    local dind = 0\n    dammagedElements = {}\n    for i, v in ipairs(allElements) do\n        health = (core.getElementHitPointsById(v.id)/v.maxHealth)*100 or 0\n        --system.print(health)\n        if health < 99.9 then\n            dind = dind + 1\n            dammagedElements[dind] = {}\n            vx,vy,vz = local2World(v.localPos[1], v.localPos[2], v.localPos[3])\n            dammagedElements[dind].pos = {vx,vy,vz}\n            dammagedElements[dind].text = format(\"%.1f\",health)\n        end\n    end\n\n    for i, v in ipairs(localBb) do\n        vx,vy,vz = local2World(v[1], v[2], v[3])\n        worldBb[i] = {vx,vy,vz}\n    end\n    \n    \n    local gAT = system.getUtcTime() --system.print(gAT)\n    local tl = #remainingWP\n    local ctn = #playerRecap.chronoTours\n    local chrono = 0\n    \n    local wpDist = vectorLen(remainingWP[1][1]-cWPx,remainingWP[1][2]-cWPy,remainingWP[1][3]-cWPz)\n    if wpDist < wpRadius then\n        playerRecap.waypoint = playerRecap.waypoint + 1 \n        playSound(\"checkpoint\")\n        if playerRecap.waypoint > tl then \n            if ctn + 1 > tourEnd then\n                playSound(\"finish\")\n                playerRecap.chronoTours[ctn][2] = gAT\n                playerRecap.waypoint = 0\n                initialised = false\n                running = false\n                \n            else\n                playerRecap.waypoint = 1\n                playerRecap.chronoTours[ctn][2] = gAT\n                playerRecap.chronoTours[ctn+1] = {gAT,0}    \n            end\n        emitter.send(emitterChan,serialize({construct = {id = construct.getId(), name = construct.getName()}, player = {id = player.getId(), name = player.getName()}, totalTime = system.getUtcTime()-playerRecap.chronoTours[1][1], lap = #playerRecap.chronoTours}))\n        end\n        remainingWP = tableShift(remainingWP, -1)\n    end\n\n    \n    local v2x,v2y,v2z = 0,0,0\n    for i, v in ipairs(remainingWP) do\n        vx,vy,vz = v[1], v[2], v[3]\n        if i == 1 then \n            wpDist = vectorLen(vx-cWPx,vy-cWPy,vz-cWPz)\n        else \n            if i < tl then\n                v2x,v2y,v2z = remainingWP[i+1][1], remainingWP[i+1][2], remainingWP[i+1][3]\n                wpDist = wpDist + vectorLen(vx-v2x,vy-v2y,vz-v2z)\n            else \n                v2x,v2y,v2z = remainingWP[1][1], remainingWP[1][2], remainingWP[1][3]\n                wpDist = wpDist + vectorLen(vx-v2x,vy-v2y,vz-v2z)\n            end\n        end\n        remainingWP[i].dist = wpDist\n    end\n\n    --table.sort(WP, function(a,b)return a.dist<b.dist end) --v[2]-v[1]\n    local max = math.huge\n    local min = 0\n    for i, v in ipairs(playerRecap.chronoTours) do\n        min = v[2]-v[1]\n        if i ~= cpn and min < max then\n            playerRecap.bestTour = min\n            max = min\n        end\n    end\n    running = true\n        \nelse \n    if recordingMode == true then\n        local function convertToWorldCoordinates(posString)\n            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n            local posPattern = '::pos{' .. num .. ',' .. num .. ',' .. num .. ',' .. num ..  ',' .. num .. '}'\n            local systemId, bodyId, latitude, longitude, altitude = match(posString,posPattern)\n            systemId = toNum(systemId)\n            bodyId = toNum(bodyId)\n            latitude = toNum(latitude)\n            longitude = toNum(longitude)\n            altitude = toNum(altitude)\n            if toNum(bodyId) == 0 then\n                return latitude,longitude,altitude\n            end\n            latitude = 0.0174532925199 * max(min(latitude, 90), -90)\n            longitude = 0.0174532925199 * (longitude % 360)\n            local center, radius = Helios[bodyId].center, toNum(Helios[bodyId].radius)\n            local xproj = cos(latitude)\n            local px, py, pz = center[1]+(radius+altitude) * xproj*cos(longitude),\n            center[2]+(radius+altitude) * xproj*sin(longitude),\n            center[3]+(radius+altitude) * sin(latitude)\n            return px, py, pz\n        end\n\n        local convertWP = function(t) -- convert a table of pos\n            local newT = {}\n            local x,y,z = 0,0,0\n            for i, v in ipairs(t) do\n                x,y,z = convertToWorldCoordinates(v)\n                newT[i] = {x,y,z} \n            end\n            return newT\n        end\n\n        local rx, ry, rz = cWPx, cWPy, cWPz\n        if #recordedWPPos ~= 0 then rx, ry, rz = convertToWorldCoordinates(recordedWPPos[#recordedWPPos])end\n        \n        local lastDist = vectorLen(rx-cWPx, ry-cWPy, rz-cWPz)\n        \n        if autoRecording == true and lastDist > autoRecordingdistance then\n            recordedWPPos[#recordedWPPos+1] = system.getWaypointFromPlayerPos()\n            system.setWaypoint(system.getWaypointFromPlayerPos(),true)\n            system.print(\"auto waypoint added\")\n        end\n        WP = convertWP(recordedWPPos)\n    else\n        running = false\n    end\nend\n\n--playerRecap = {}\n--playerRecap.chronoStart = system.getArkTime()\n--playerRecap.chronoTours = {system.getArkTime()}\n--playerRecap.waypoint = 0\n--playerRecap.bestTour = 0\n--remainingWP = WP","filter":{"args":[],"signature":"onFlush()","slotKey":"-4"},"key":"5"},{"code":"script.luaInput(text)","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"6"},{"code":"if recordingMode == true then\n    autoRecording = not autoRecording\n    if autoRecording == true then\n        system.print(\"recording\")\n        recordedWPPos[#recordedWPPos+1] = system.getWaypointFromPlayerPos()\n        system.setWaypoint(system.getWaypointFromPlayerPos(),true)\n    elseif autoRecording == false then\n        system.print(\"stoped recording\")\n        local data = \"{\"\n        for i, v in ipairs(recordedWPPos) do\n            data = data ..'\"'.. v ..'\",'\n        end\n        data = data .. \"}\"\n        if screen ~= nil then \n            screen.setHTML(data)\n        end\n    end\nend","filter":{"args":[{"value":"option9"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"7"},{"code":"if recordingMode == true then\n    system.print(\"last waypoint deleted\")\n    recordedWPPos[#recordedWPPos] = nil\n    --system.setWaypoint(recordedWPPos[#recordedWPPos],true)\nend","filter":{"args":[{"value":"option8"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"8"},{"code":"\nrecordedWPPos[#recordedWPPos+1] = system.getWaypointFromPlayerPos()\n--system.setWaypoint(system.getWaypointFromPlayerPos(),true)\nsystem.print(\"added custom waypoints: \"..#recordedWPPos)","filter":{"args":[{"value":"option7"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"9"},{"code":"if recordingMode == true then\n    system.setWaypoint(recordedWPPos[1],true)\nend","filter":{"args":[{"value":"option6"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"10"},{"code":"local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"11"}],"methods":[],"events":[]}