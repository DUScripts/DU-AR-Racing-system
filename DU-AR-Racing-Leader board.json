{"slots":{"0":{"name":"receiver","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"local decodeMessage = deserialize(message)\nif type(decodeMessage) == \"table\" then\n    --system.print(message)\n    local dbData = deserialize(DB.getStringValue(\"players data\"))\n    local pExist = false\n    if dbData.p then\n        for i, v in ipairs(dbData.p)do\n            if v.n == decodeMessage.name then\n                pExist = true\n                if decodeMessage.bestTTime and decodeMessage.bestTTime < data.p[i].bT and decodeMessage.bestTTime > 1 then\n                    data.p[i].bT = decodeMessage.bestTTime\n                end\n                if decodeMessage.bestLap and decodeMessage.bestLap < data.p[i].bL and decodeMessage.bestLap > 1 then\n                    data.p[i].bL = decodeMessage.bestLap\n                end\n            end\n        end\n    end\n    if pExist == false and decodeMessage.name and decodeMessage.bestTTime then\n        if not data.p then data.p = {} end\n        system.print(\"Registering new player: \"..decodeMessage.name)\n        local ind = #data.p <=29 and #data.p + 1 or 30\n        data.p[ind] = {}\n        data.p[ind][\"n\"] = decodeMessage.name or \"error\" --player name\n        data.p[ind][\"bT\"] = decodeMessage.bestTTime or 0 --player total best time\n        data.p[ind][\"bL\"] = decodeMessage.bestLap or 0 --player best lap\n        data.p[ind][\"tL\"] = decodeMessage.laps or 0 --player total laps\n    end\n    if switch.isActive() == true then\n        table.sort(data.p, function(a, b) return a.bT < b.bT end)\n    else\n        table.sort(data.p, function(a, b) return a.bL < b.bL end)    \n    end\n    DB.setStringValue(\"players data\",serialize(data))\n    buildRender(1) --build render for screens 1\n    for i, v in ipairs(screens1) do\n        v.activate()\n        v.setRenderScript(screenScript)\n    end\n\n    buildRender(2) --build render for screens 2\n    for i, v in ipairs(screens2) do\n        v.activate()\n        v.setRenderScript(screenScript)\n    end\nend\n\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"onReceived(channel,message)","slotKey":"0"},"key":"0"},{"code":"\ncolor = {r=0.8,g=0.8,b=0.8}  --export:pos/driver/times text color\nframecolor = {r=0,g=0.4,b=1} --export:Frame\n\nadmins = {\"Jeronimo\",\"RyanPryde\"} --export: admin list for chat commands\nisAdmin = false\nfor i, v in ipairs(admins) do\n    if player.getName() == v then \n        isAdmin = true \n        system.print(\"Admin privileges granted\") \n        break \n    end\nend\n\nsystem.print(\"Sync Board started\")\ncore = nil\nscreens1 = {}\nscreens2 = {}\nemitter = nil\nbutton = nil\nswitch = nil\nkillSwitch = nil\nreceiver = nil\nDB = nil\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n         if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getElementClass())\n            if slot.getClass() == \"CoreUnitDynamic\" then\n                --core = slot\n                --system.print(\"Core found\")\n            end\n            if slot.getClass() == \"ScreenUnit\" then\n                if slot.getName() == \"screen1\" then\n                    screens1[#screens1+1] = slot\n                    system.print(\"Screen 1 found\")\n                elseif slot.getName() == \"screen2\" then    \n                    screens2[#screens2+1] = slot\n                    system.print(\"Screen 2 found\")\n                end\n            end\n            if slot.getClass() == \"EmitterUnit\" then\n                emitter = slot\n                system.print(\"Emitter found\")\n            end\n            if slot.getClass() == \"ManualSwitchUnit\" then\n                if slot.getName() == \"kill\" then\n                    killSwitch = slot\n                    system.print(\"Kill switch found\")\n                else    \n                    switch = slot\n                    system.print(\"Switch found\")\n                end\n            end\n            if slot.getClass() == \"ReceiverUnit\" then\n                receiver = slot\n                system.print(\"Receiver found\")\n            end \n            if slot.getClass() == \"ManualButtonUnit\" then\n                button = slot\n                system.print(\"Button found\")\n            end\n            if slot.getClass() == \"DataBankUnit\" then\n                DB = slot\n                system.print(\"DataBank found\")\n            end\n        end\n    end\nend\nfindConnectedSlots()\nif #screens1 == 0 or receiver == nil or killSwitch == nil or switch == nil or DB == nil then system.print(\"All elements need to be connected!\") unit.exit()end\nsystem.print(\"Script initialised\")\n\ncircuitName = \"Hadron Island Race\" -- export: circuit name\nreceiverChan = \"hadronRace\" --export: emitter communication channel\nchronoStartCode = 1666537200 -- export: race code for synchronized start (starting time in sec)\nlaps = 2 -- export: laps total number\n\nlocal channels = {receiverChan}\nreceiver.setChannelList(channels)\n\n--players = {circuitName=\"test\",laps=\"\",startTime=\"\",raceMode=\"\"}\ndata = deserialize(DB.getStringValue(\"players data\")) or {p={}}\n\nfor i = 1, 29 do\n    --data.p[i]={n = \"playerabcd\"..i, bT = math.random(99999)/100}\nend\n\ndata['cN']=circuitName\ndata['l']=laps\ndata['sT']=startTime\n\nfor i, v in ipairs(data.p) do\n    if not v.bL then v[\"bL\"] = v.bT end\nend\nif switch.isActive() == true then\n    table.sort(data.p, function(a, b) return a.bT < b.bT end)\nelse\n    table.sort(data.p, function(a, b) return a.bL < b.bL end)    \nend\n\nDB.setStringValue(\"players data\",serialize(data))\n\n\n\n\n\n\n\nbuildRender(1) --build render for screens 1\nfor i, v in ipairs(screens1) do\n    v.activate()\n    v.setRenderScript(screenScript)\nend\n\nbuildRender(2) --build render for screens 2\nfor i, v in ipairs(screens2) do\n    v.activate()\n    v.setRenderScript(screenScript)\nend\n\nunit.setTimer('kill',3)","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"for i, v in ipairs(data.p) do\n    --data.p[i][\"bT\"] = math.random(9999)\nend\n\nlocal dbData = deserialize(DB.getStringValue(\"players data\"))\n\ntable.sort(dbData.p, function(a, b) return a.bT < b.bT end)\nfor i, v in ipairs(screens1) do\n    v.setScriptInput(serialize(dbData))\nend\n","filter":{"args":[{"value":"screenOutput"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"killSwitch.deactivate()","filter":{"args":[],"signature":"onStop()","slotKey":"-1"},"key":"3"},{"code":"killSwitch.deactivate()\nunit.exit()","filter":{"args":[{"value":"kill"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"if isAdmin == true then\n    if text == \"reset all\" then\n        DB.clear()\n        system.print(\"Databank been reset, please restart programming board!\")\n        unit.exit()\n    elseif string.sub(text,1,6)  == \"remove\" then\n        local pName = string.sub(text,8,-1)\n        local dbData = deserialize(DB.getStringValue(\"players data\"))\n        local ind = 0\n        local newPData = {}\n        for i, v in ipairs(dbData.p) do\n            if v.n ~=  pName then\n               ind = ind + 1\n               newPData[ind] = v\n            end\n        end\n        dbData.p = newPData\n        DB.setStringValue(\"players data\",serialize(dbData))\n        system.print(\"Player \"..pName..\" has been removed, please restart programming board!\")\n        unit.exit()\n    else\n        system.print(\"Chat commands are:\")\n        system.print(\"- reset all\")\n        system.print(\"- remove playerName\")\n    end\nend","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"5"},{"code":"local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend\n\nserializer = [[local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend]]","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"6"},{"code":"local concat, format = table.concat, string.format\nfunction buildRender(screen)\n    --local orientation = \"\"\n    --if screen == 1 then orientation = tostring(\"SCREEN1\") else orientation = tostring(\"SCREEN2\") end\n    screenScript = {}\n    local rot=screen==1 and 180 or 0\n    local ind = 0\n    ind = ind+1\n    screenScript[ind] = [[\n\nlocal concat, format, floor = table.concat, string.format, math.floor\n    \nfunction SecondsToClock(seconds)\n    local seconds = tonumber(seconds)\n    local miliSec = seconds - floor(seconds) \n    if seconds <= 0 then --or floor(seconds/3600) > 24 \n        return \"00min : 00sec\"\n    else\n        local hours = format(\"%02.f\", floor(seconds/3600))\n        local mins = format(\"%02.f\", floor(seconds/60 - (hours*60)))\n        local secs = format(\"%02.f\", floor(seconds - hours*3600 - mins *60))\n        return format(\"%.0fmin : %.0fsec : %0.fms\", hours*60+mins, secs, miliSec*1000)\n    end\nend\n\n----------------------------------------------\n--Adjustable variables\n----------------------------------------------\ncolumnsX = {50, 125, 375, 700} -- columns Y position\n    \n--columns labels\nlabel0= \"p#\"\nlabel1= \"Driver:\"\nlabel2= \"Total Racetime:\"\nlabel3= \"Laptime:\"\n    \nyAlignment = 140 -- default Y alignment of fixed text\nyOffset = -95 -- Y alignment offset of text on screen2    \nspacing = 12 -- lines spacing\n    \nfont_size_mini = 12\nfont_mini = loadFont('TurretRoad', font_size_mini)\n    \nfont_size = 27\nfont = loadFont('Oxanium', font_size)\n--font = loadFont('TurretRoad', font_size)\n    \nfont_size_big = 65\nfont_big = loadFont('TurretRoad-Bold', font_size_big)\n\nbackground_image = loadImage(\"assets.prod.novaquark.com/102348/3cf92ccf-e518-4456-9d90-f115b6324b0f.jpg\")\nlogo_image = loadImage(\"assets.prod.novaquark.com/102348/4c0b57bd-5876-4392-97dd-bf42248e2f24.png\")\n----------------------------------------------------   \n-------------------------------------------------    \n    \nrx, ry = getResolution()\nox = rx/2 --layer center\noy = ry/2 --layer center\nt = getTime()\ntime = math.cos(t*2)   \nfontAH, fontDH = getFontMetrics(font)\n\nif ]]..rot..[[ == 180 then \n    Header = \"LEADERBOARD\" \n    Signature= \"\"\n    yOffset = 0\n    Racetrack = \"]]..circuitName..[[\"\nelse \n    --yoffset = -60\n    Header = \"\" \n    Signature= \"by Jeronimo // github.com/JeronimoDU/DU-AR-Racing-system\"\n    Racetrack = \"\"\nend\n    \n\n---------------------------------------------\n--background\nbackground = createLayer() -- background image Layer\nsetNextFillColor(background,1,1,1,0.2)\naddImage(background,background_image,0,0,rx,ry)\n    \nlogo = createLayer() -- logo Layer\n    \nsetLayerOrigin(logo, ox, oy)\nsetLayerRotation(logo, math.rad(]]..rot..[[))\n    \nsetNextFillColor(logo,1,1,1,0.04)\naddImage(logo,logo_image,rx/2-250,ry/2,500,250)\n    \n---------------------------------------------\n--background lines \nlines = createLayer() -- lines Layer\nsetDefaultFillColor(lines, Shape_Line, 0, 0, 0, 0)\nsetDefaultStrokeWidth(lines, Shape_Line, 1)\nsetDefaultStrokeColor(lines, Shape_Line, 1, 1, 1, 0.25)\n\nsetDefaultFillColor(lines, Shape_Polygon, 1, 1, 1, 0.20)\nsetDefaultStrokeWidth(lines, Shape_Polygon, 0)\nsetDefaultStrokeColor(lines, Shape_Polygon, 0, 0, 0, 0)\n    \nsetLayerOrigin(lines, ox, oy)\nsetLayerRotation(lines, math.rad(]]..rot..[[))\n        \n--------------------------------------------------------------\n--Text\ntext = createLayer() -- fixed text Layer\nsetDefaultFillColor(text, Shape_Text, ]].. color.r ..[[,]].. color.g ..[[,]].. color.b ..[[, 1)\nsetDefaultStrokeWidth(text, Shape_Text, 1)\nsetDefaultStrokeColor(text, Shape_Text, 0, 0, 0, 0.5)\nsetDefaultTextAlign(text, AlignH_Left, AlignV_Baseline)\n\nsetLayerOrigin(text, ox, oy)\nsetLayerRotation(text, math.rad(]]..rot..[[))\n\naddText(text, font, label0, columnsX[1], yAlignment+yOffset)\naddText(text, font, label1, columnsX[2], yAlignment+yOffset)\n]]\n    if switch.isActive() == true then\n        ind = ind+1\n        screenScript[ind] = [[\nsetNextFillColor(text, 1,1,0,1)        \n        ]]\n    end\n    ind = ind+1\n    screenScript[ind] = [[\naddText(text, font, label2, columnsX[3], yAlignment+yOffset)\n]]\n    if switch.isActive() == false then\n        ind = ind+1\n        screenScript[ind] = [[\nsetNextFillColor(text, 1,1,0,1)        \n        ]]\n    end\n    ind = ind+1\n    screenScript[ind] = [[\naddText(text, font, label3, columnsX[4], yAlignment+yOffset)\n\nsetNextTextAlign(text, AlignH_Center, AlignV_Middle)\naddText(text, font_mini, Signature, rx/2, ry-20)\n    \n---------------------------------------------------------\n--Frame\nframe = createLayer() -- frame Layer\nsetDefaultFillColor(frame, Shape_BoxRounded, 0, 0, 0, 0)\nsetDefaultStrokeWidth(frame, Shape_BoxRounded, 5)\nsetDefaultStrokeColor(frame, Shape_BoxRounded, ]].. framecolor.r ..[[,]].. framecolor.g ..[[,]].. framecolor.b ..[[, 1)\n\naddBoxRounded(frame,10,10,rx -20,ry -20,40)\n    \n---------------------------------------------\n--Tittle text\ntittleText = createLayer() -- tittle text Layer\nsetDefaultFillColor(tittleText, Shape_Text, ]].. color.r ..[[,]].. color.g ..[[,]].. color.b ..[[, 1)\nsetDefaultStrokeWidth(tittleText, Shape_Text, 5)\nsetDefaultStrokeColor(tittleText, Shape_Text,]].. framecolor.r ..[[,]].. framecolor.g ..[[,]].. framecolor.b ..[[, time)\nsetDefaultTextAlign(tittleText, AlignH_Center, AlignV_Middle)\n\nsetLayerOrigin(tittleText, ox, oy)\nsetLayerRotation(tittleText, math.rad(]]..rot..[[))\n    \naddText(tittleText, font_big, Header, rx/2, ry/2-250)\n-----------------------------------------------\nsetDefaultFillColor(tittleText, Shape_Text, ]].. color.r ..[[,]].. color.g ..[[,]].. color.b ..[[, 1)\nsetDefaultStrokeWidth(tittleText, Shape_Text, 2)\nsetDefaultStrokeColor(tittleText, Shape_Text,]].. framecolor.r ..[[,]].. framecolor.g ..[[,]].. framecolor.b ..[[, 1)\nsetDefaultTextAlign(tittleText, AlignH_Center, AlignV_Middle)\n\nsetLayerOrigin(tittleText, ox, oy)\nsetLayerRotation(tittleText, math.rad(]]..rot..[[))\n\naddText(tittleText, font, Racetrack, rx/2, ry/2-205)\n\n---------------------------------------------------------\nlineOffsetY = fontAH + spacing\n]]\n\n  \nlocal dbData = deserialize(DB.getStringValue(\"players data\"))\nlocal playersList = dbData ~= nil and dbData.p or nil\nlocal limit = 13 --max player on first screen\nlocal limit2 = 29 --max players on second screen\n    \nif screen == 1 then\n    ind = ind+1\n    screenScript[ind] = [[\n]]\n        \n    if playersList then\n        for i, v in ipairs(playersList) do\n            if i <= limit then\n                local bT = v.bT or 0.000\n                local bL = v.bL or 0.000 \n                local pN = string.sub(v.n,1,15) or \"error\" \n                ind = ind+1\n                screenScript[ind] = [[\nbestTime = ]].. bT .. [[\n                    \nbestLap = ]].. bL .. [[\n                    \nplayerName = \"]].. pN .. [[\"\n\ntextY = yAlignment + ]]..i..[[ * lineOffsetY\n\n--addBox(lines, 50,textY+spacing/2,rx-50,textY-lineOffsetY+spacing/2)\nc1 = textY+spacing/2\nc2 = textY-lineOffsetY+spacing/2\n]]\n                if (i % 2 == 0) then\n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(lines,1,1,1,0.10)\n]] \n                else\n                    \n                end\n                    \n                    ind = ind+1\n                    screenScript[ind] = [[ \naddQuad(lines, 50, c1, rx-50, c1, rx-50, c2, 50, c2)\n                    \n--addLine(lines, 50, textY-lineOffsetY+spacing/2, rx-50, textY-lineOffsetY+spacing/2)                    \n]]                   \n                    \n                if i == 1 then                 \n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(text, 1, 0, 0, 1)\n]] \n                end\n                ind = ind+1\n                screenScript[ind] = [[                \naddText(text, font, tostring(]]..i..[[), columnsX[1], textY)\n]]\n                    \n                if i == 1 then                 \n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(text, 1, 0, 0, 1)\n]] \n                end\n                ind = ind+1\n                screenScript[ind] = [[\naddText(text, font, tostring(string.sub(playerName,1,15)), columnsX[2], textY)\n]]                   \n                if i == 1 then                 \n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(text, 1, 0, 0, 1)\n]] \n                end\n                ind = ind+1\n                screenScript[ind] = [[\naddText(text, font, tostring(SecondsToClock(bestTime)), columnsX[3], textY)\n]]                    \n                if i == 1 then                 \n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(text, 1, 0, 0, 1)\n]] \n                end\n                ind = ind+1\n                screenScript[ind] = [[\naddText(text, font, tostring(SecondsToClock(bestLap)), columnsX[4], textY)               \n                    \n]]        \n            else\n                break\n            end\n        end\n    end\n        \nelseif screen == 2 then \n    ind = ind+1\n    screenScript[ind] = [[\n\n]] \n        \n    if playersList then\n        for i, v in ipairs(playersList) do\n            if i > limit and i <= limit2 then\n                local bT = v.bT or 0.000\n                local bL = v.bL or 0.000 \n                local pN = string.sub(v.n,1,15) or \"error\" \n                ind = ind+1\n                screenScript[ind] = [[\nbestTime = ]].. bT .. [[\n                    \nbestLap = ]].. bL .. [[\n                    \nplayerName = \"]].. pN .. [[\"\n\ntextY = yAlignment + (]]..i..[[-]]..limit..[[) * lineOffsetY + yOffset\n\nc1 = textY+spacing/2\nc2 = textY-lineOffsetY+spacing/2                                      \n]]\n                if (i % 2 == 0) then\n                    ind = ind+1\n                    screenScript[ind] = [[\nsetNextFillColor(lines,1,1,1,0.1)\n]] \n                else\n                    \n                end\n                    \n                    ind = ind+1\n                    screenScript[ind] = [[ \naddQuad(lines, 50, c1, rx-50, c1, rx-50, c2, 50, c2)\n                    \n--addLine(lines, 50, textY-lineOffsetY+spacing/2, rx-50, textY-lineOffsetY+spacing/2)                                       \n                    \naddText(text, font, tostring(]]..i..[[), columnsX[1], textY)\n\naddText(text, font, tostring(string.sub(playerName,1,15)), columnsX[2], textY)\n                    \naddText(text, font, tostring(SecondsToClock(bestTime)), columnsX[3], textY)\n                    \naddText(text, font, tostring(SecondsToClock(bestLap)), columnsX[4], textY)\n                    \n]]\n            end\n        end\n    end\nend\n\nind = ind+1\nscreenScript[ind] = [[\n--rslib = require(\"rslib\")\n--rslib.drawRenderCost()\nrequestAnimationFrame(1)\n]]\nscreenScript = concat(screenScript)\nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"7"}],"methods":[],"events":[]}
