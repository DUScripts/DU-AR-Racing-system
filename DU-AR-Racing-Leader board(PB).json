{"slots": {"0": {"name": "core", "type": {"events": [], "methods": []}}, "1": {"name": "receiver", "type": {"events": [], "methods": []}}, "2": {"name": "slot3", "type": {"events": [], "methods": []}}, "3": {"name": "slot4", "type": {"events": [], "methods": []}}, "4": {"name": "slot5", "type": {"events": [], "methods": []}}, "5": {"name": "slot6", "type": {"events": [], "methods": []}}, "6": {"name": "slot7", "type": {"events": [], "methods": []}}, "7": {"name": "slot8", "type": {"events": [], "methods": []}}, "8": {"name": "slot9", "type": {"events": [], "methods": []}}, "9": {"name": "slot10", "type": {"events": [], "methods": []}}, "-1": {"name": "unit", "type": {"events": [], "methods": []}}, "-3": {"name": "player", "type": {"events": [], "methods": []}}, "-2": {"name": "construct", "type": {"events": [], "methods": []}}, "-4": {"name": "system", "type": {"events": [], "methods": []}}, "-5": {"name": "library", "type": {"events": [], "methods": []}}}, "handlers": [{"code": "local decodeMessage = deserialize(message)\nif type(decodeMessage) == \"table\" then\n    system.print(message)\n    local dbData = deserialize(DB.getStringValue(\"players data\"))\n    local pExist = false\n    if dbData.p then\n        for i, v in ipairs(dbData.p)do\n            if v.n == decodeMessage.name then\n                pExist = true\n                if decodeMessage.bestTime < data.p[i].bT and decodeMessage.bestTime > 1 then\n                    data.p[i].bT = decodeMessage.bestTime\n                end\n            end\n        end\n    end\n    if pExist == false and decodeMessage.name and decodeMessage.bestTime then\n        if not data.p then data.p = {} end\n        system.print(\"Registering new player: \"..decodeMessage.name)\n        local ind = #data.p <=29 and #data.p + 1 or 30\n        data.p[ind] = {}\n        data.p[ind][\"n\"] = decodeMessage.name\n        data.p[ind][\"bT\"] = decodeMessage.bestTime\n    end\n        \n    table.sort(data.p, function(a, b) return a.bT < b.bT end)\n    DB.setStringValue(\"players data\",serialize(data))\n    for i, v in ipairs(screens) do\n        v.setScriptInput(serialize(data))\n    end\nend\n", "filter": {"args": [{"variable": "*"}, {"variable": "*"}], "signature": "onReceived(channel,message)", "slotKey": "1"}, "key": "0"}, {"code": "system.print(\"Sync Board started\")\ncore = nil\nscreens = {}\nemitter = nil\nbutton = nil\nswitch = nil\nkillSwitch = nil\nreceiver = nil\nDB = nil\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n         if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getElementClass())\n            if slot.getClass() == \"CoreUnitDynamic\" then\n                core = slot\n                system.print(\"Core found\")\n            end\n            if slot.getClass() == \"ScreenUnit\" then\n                screens[#screens+1] = slot\n                system.print(\"Screen found\")\n            end\n            if slot.getClass() == \"EmitterUnit\" then\n                emitter = slot\n                system.print(\"Emitter found\")\n            end\n            if slot.getClass() == \"ManualSwitchUnit\" then\n                if slot.getName() == \"kill\" then\n                    killSwitch = slot\n                    system.print(\"Kill switch found\")\n                else    \n                    switch = slot\n                    system.print(\"Switch found\")\n                end\n            end\n            if slot.getClass() == \"ReceiverUnit\" then\n                receiver = slot\n                system.print(\"Receiver found\")\n            end \n            if slot.getClass() == \"ManualButtonUnit\" then\n                button = slot\n                system.print(\"Button found\")\n            end\n            if slot.getClass() == \"DataBankUnit\" then\n                DB = slot\n                system.print(\"DataBank found\")\n            end\n        end\n    end\nend\nfindConnectedSlots()\nif core == nil or #screens == 0 or receiver == nil or killSwitch == nil or button == nil or switch == nil or DB == nil then system.print(\"All elements need to be connected!\") unit.exit()end\nsystem.print(\"Script initialised\")\n\n\ncircuitName = \"Hadron Island Race\" -- export: circuit name\nreceiverChan = \"hadronRace\" --export: emitter communication channel\nchronoStartCode = 1666537200 -- export: race code for synchronized start (starting time in sec)\nlaps = 2 -- export: laps total number\n\nlocal channels = {receiverChan}\nreceiver.setChannelList(channels)\n\nlocal raceMode = \"lap\" -- export: \"lap\" / \"bestTime\"\nif switch.isActive() == true then\n    system.print(\"Lap mode active\")\n    raceMode = \"lap\"\nelse\n    system.print(\"Best time mode active\")\n    raceMode = \"bestTime\"\nend\n\n\n--grnd = {height=hovGndDet,max=hovGndMax,ground=hovGndDet,tel=-1}\n--players = {circuitName=\"test\",laps=\"\",startTime=\"\",raceMode=\"\"}\ndata = deserialize(DB.getStringValue(\"players data\")) or {p={}}\n\nfor i = 1, 29 do\n    --data.p[i]={n = \"playerabcd\"..i, bT = math.random(99999)/100}\nend\n\ndata['cN']=circuitName\ndata['l']=laps\ndata['sT']=startTime\ndata['rM']=raceMode\nfor i, v in ipairs(screens) do\n    v.setScriptInput(serialize(data))\nend\n\nDB.setStringValue(\"players data\",serialize(data))\n--system.print(serialize(data))\n--unit.setTimer('screenOutput',3)\nunit.setTimer('kill',3)", "filter": {"args": [], "signature": "onStart()", "slotKey": "-1"}, "key": "1"}, {"code": "for i, v in ipairs(data.p) do\n    --data.p[i][\"bT\"] = math.random(9999)\nend\n\nlocal dbData = deserialize(DB.getStringValue(\"players data\"))\n\ntable.sort(dbData.p, function(a, b) return a.bT < b.bT end)\nfor i, v in ipairs(screens) do\n    v.setScriptInput(serialize(dbData))\nend\n", "filter": {"args": [{"value": "screenOutput"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "2"}, {"code": "killSwitch.deactivate()", "filter": {"args": [], "signature": "onStop()", "slotKey": "-1"}, "key": "3"}, {"code": "killSwitch.deactivate()\nunit.exit()", "filter": {"args": [{"value": "kill"}], "signature": "onTimer(tag)", "slotKey": "-1"}, "key": "4"}, {"code": "if button.isDown() == true then\n    DB.clear()\n    system.print(\"Databank been reset\")\n    data = {p={}}\n    data['cN']=circuitName\n    data['l']=laps\n    data['sT']=startTime\n    data['rM']=raceMode\n    for i, v in ipairs(screens) do\n        v.setScriptInput(serialize(data))\n    end\n    unit.exit()\nend", "filter": {"args": [], "signature": "onUpdate()", "slotKey": "-4"}, "key": "5"}, {"code": "local concat = table.concat\n\nlocal function internalSerialize(table, tC, t)\n    t[tC] = \"{\"\n    tC = tC + 1\n    if #table == 0 then\n        local hasValue = false\n        for key, value in pairs(table) do\n            hasValue = true\n            local keyType = type(key)\n            if keyType == \"string\" then\n                t[tC] = key .. \"=\"\n            elseif keyType == \"number\" then\n                t[tC] = \"[\" .. key .. \"]=\"\n            elseif keyType == \"boolean\" then\n                t[tC] = \"[\" .. tostring(key) .. \"]=\"\n            else\n                t[tC] = \"notsupported=\"\n            end\n            tC = tC + 1\n\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        if hasValue then\n            tC = tC - 1\n        end\n    else\n        for i = 1, #table do\n            local value = table[i]\n            local check = type(value)\n            if check == \"table\" then\n                tC = internalSerialize(value, tC, t)\n            elseif check == \"string\" then\n                t[tC] = '\"' .. value .. '\"'\n            elseif check == \"number\" then\n                t[tC] = value\n            elseif check == \"boolean\" then\n                t[tC] = tostring(value)\n            else\n                t[tC] = '\"Not Supported\"'\n            end\n            t[tC + 1] = \",\"\n            tC = tC + 2\n        end\n        tC = tC - 1\n    end\n    t[tC] = \"}\"\n    return tC\nend\n\nfunction serialize(value)\n    local t = {}\n    local check = type(value)\n\n    if check == \"table\" then\n        internalSerialize(value, 1, t)\n    elseif check == \"string\" then\n        return '\"' .. value .. '\"'\n    elseif check == \"number\" then\n        return value\n    elseif check == \"boolean\" then\n        return tostring(value)\n    else\n        return '\"Not Supported\"'\n    end\n\n    return concat(t)\nend\n\nfunction deserialize(s)\n    return load(\"return \" .. s)()\nend", "filter": {"args": [], "signature": "onStart()", "slotKey": "-5"}, "key": "6"}], "methods": [], "events": []}
